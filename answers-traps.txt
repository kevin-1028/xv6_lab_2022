Q. Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf? 

A.  a0 to a7 register

Q. Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.) 

A. i dont know. I guess that the complier directly calculates the result and save it in a1 register.

Q. At what address is the function printf located? 

A. 0000000000000642 <printf>

Q. What value is in the register ra just after the jalr to printf in main? 

A. 0x38

Q. Run the following code.

	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);
      

What is the output? Here's an ASCII table that maps bytes to characters.

The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?

A. The output is: He110 World. If the RISC-V is big-endian, setting i as dlr would yield the same output. And since 57616 will always be 0xe110 no matter the RISC-V is little-endian or big-endian, we donâ€™t need to change 57616 to a different value.

Q. 

In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?

	printf("x=%d y=%d", 3);
      
A. The printed value for y is undefined. Before calling printf, the compiler will place the input parameters into registers a0-a7. When jumping to printf, the values are then read from the registers. However, since we did not specify a value for the second placeholder, a2 was not modified. Therefore, the value of y printed out is an arbitrary value that was present in a2 before the function call.
